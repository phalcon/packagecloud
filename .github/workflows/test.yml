name: Build & deploy

on:
  push

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu", "el"]
        php: [7.3, 7.4]
        branch: ["v4.1.2"]
        packagecloud_repo: ["stable-v41"]
        experimental: [false]
        include:
          - os: "ubuntu"
            dist: "trusty"
            package: "deb"

          - os: "ubuntu"
            dist: "xenial"
            package: "deb"

          - os: "ubuntu"
            dist: "xenial"
            package: "deb"

          - os: "el"
            dist: "7"
            package: "rpm"
            repo_vendor: ius

    runs-on: ubuntu-18.04
    continue-on-error: ${{ matrix.experimental }}

    name: ${{ matrix.os }}/${{ matrix.dist }} - PHP${{ matrix.php }} with ${{ matrix.branch }}

    env:
      OS: ${{ matrix.os }}
      DIST: ${{ matrix.dist }}
      PACKAGE: ${{ matrix.package }}
      CLONE_BRANCH: ${{ matrix.branch }}
      PHP_VERSION: ${{ matrix.php }}
      PACKAGECLOUD_REPO: ${{ matrix.packagecloud_repo }}
      REPO_VENDOR: ${{ matrix.repo_vendor }}
      PHP_EXTENSIONS: memcached, psr, redis

      #
      PRODUCT: "php-phalcon"
      PRODUCT_GIT: "https://github.com/phalcon/cphalcon.git"

      DOCKER_REPO: "phalconphp/build"

      TARGET: "package"
      RE2C_VERSION: "1.1.1"

      # To build 3.x branch use
      #  ZEPHIR_VERSION >= 0.10.0 (for example 0.10.16)
      #  ZEPHIR_PARSER_VERSION >= v1.1.x (for example v1.1.4)
      # To build 4.x branch use
      #  ZEPHIR_VERSION >= 0.11.0 (for example 0.12.15)
      #  ZEPHIR_PARSER_VERSION >= v1.2.x (for example v1.3.3)
      ZEPHIR_VERSION: "0.12.21"
      ZEPHIR_PARSER_VERSION: "v1.3.6"

      ZEND_BACKEND: "--backend=ZendEngine3"
      STABLE_BUILD_VERSION: "1"

      STABLE_BRANCH: "v3.4.5"
      MAINLINE_BRANCH: "v4.1.2"
      NIGHTLY_BRANCH: "4.1.x"

      PACKAGECLOUD_USER: "phalcon"

      PACKAGECLOUD_STABLE_REPO: "stable"
      PACKAGECLOUD_MAINLINE_REPO: "mainline"
      PACKAGECLOUD_NIGHTLY_REPO: "nightly"

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1

      # Setup PHP
      - name: Setup cache environment
        id: extcache
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          key: "phalcon-packagecloud"

      - name: Cache extensions
        uses: actions/cache@v2
        with:
          path: ${{ steps.extcache.outputs.dir }}
          key: ${{ steps.extcache.outputs.key }}
          restore-keys: ${{ steps.extcache.outputs.key }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}

      - name: Before install
        run: |
          source environment
          export $(cat environment | grep -v "^#\|^$" | cut -d= -f1)
#          source ci/export-buildtab.sh

      - run: echo "MAINLINE_BUILD_VERSION=${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
      - run: echo "NIGHTLY_BUILD_VERSION=${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
      - run: echo "SOURCEDIR=${GITHUB_WORKSPACE}/cphalcon" >> $GITHUB_ENV
      - run: echo "PHP_FULL_VERSION=$(php -r "echo PHP_VERSION;")" >> $GITHUB_ENV

      - name: Prepare OS
        run: |
          if [ $OS != "el" ]; then ./ci/prepare-debian.sh; fi
          if [ $OS = "el" ]; then ./ci/prepare-rpm.sh; fi

      - name: Clone cphalcon
        run: git clone -b ${{ env.CLONE_BRANCH }} --depth 1 -q ${{ env.PRODUCT_GIT }} ${{ env.SOURCEDIR }} 1>/dev/null

      - run: ./ci/regenerate-build.sh

      - name: Install
        run: |
          ./ci/install-re2c.sh
          ./ci/install-zephir-parser.sh
          ./ci/install-zephir.sh

      - run: make -f .travis.mk ${{ env.TARGET }}

      - run: ls -la build/

      - name: Install Package Cloud
        run: |
          sudo gem install rake
          sudo gem install package_cloud

      - name: Push package to phalcon/${{ matrix.packagecloud_repo }}/${{ matrix.os }}/${{ matrix.dist }}
        run: package_cloud push phalcon/${{ matrix.packagecloud_repo }}/${{ matrix.os }}/${{ matrix.dist }} build/*.${{ matrix.package }}
        env:
          PACKAGECLOUD_TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}
